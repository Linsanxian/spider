# -*- coding: utf-8 -*-
"""
Created on 2023-05-25 22:33:56
---------
@summary:
---------
@author: admin1
@微信小程序: 共鞋
"""

import hashlib
from functools import reduce
from urllib.parse import quote
import feapder
from fake_headers import Headers
import requests
from feapder import Item
import json
import re

brand_list = ['NIKE', 'JORDAN', 'ADIDAS', 'TNF', 'The North Face', 'Lining', 'PUMA', 'UGG',
              'TEVA', 'HOKA', 'CONVERSE', 'VANS', 'New Balance', 'SUPREME', 'OFF-WHITE',
              'Champion', 'ASICS', 'ONITSUKA', 'MIZUNO', 'REEBOK', 'ANTA', 'Arcteryx',
              'Salomon', 'PEAK', 'Under Armour', 'SKECHERS', 'CROCS', 'Lululemon',
              'GUCCI', 'Timberland', 'Louis Vuitton']


def match_brand(title, brand_list):
    for brand in brand_list:
        pattern = re.compile(brand, re.IGNORECASE)
        if re.search(pattern, title):
            return brand
    return None


def enMd5(value):
    """
    把目标数据进行哈希，用哈希值去重更快
    """
    md5 = hashlib.md5()
    md5.update(str(value).encode('utf-8') if type !=
               str else value.encode('utf-8'))
    return md5.hexdigest()


def enSign(page):
    token = '4341070815154176'
    userId = '4341070815154176'
    secret = "93b372fb614dbcc9648770751d2fddf8"
    data = [
        "token=" + token,
        "uuid=" + userId,
        "page=" + str(page),
        "type=" + '1'
    ]  # 传入的params

    data.sort()
    p = reduce(lambda x, y: x + y + "&", data, "")
    return enMd5(quote(p + secret))


def enSigns_info(gx_id):
    token = '4341070815154176'
    userId = '4341070815154176'
    secret = "93b372fb614dbcc9648770751d2fddf8"
    data = [
        "token=" + token,
        "uuid=" + userId,
        "id=" + str(gx_id),
    ]  # 传入的params

    data.sort()
    p = reduce(lambda x, y: x + y + "&", data, "")
    return enMd5(quote(p + secret))


class GXItem(Item):
    """
    This class was generated by feapder
    command: feapder create -i tb_h688 1
    """

    __table_name__ = "gx"

    def __init__(self, *args, **kwargs):
        self.articleNum = kwargs.get('articleNum')
        self.title = kwargs.get('title')
        self.gx_id = kwargs.get('gx_id')
        self.photo_url = kwargs.get('photo_url')
        self.size = kwargs.get('size')
        self.acquisition = kwargs.get('acquisition')
        self.sell = kwargs.get('sell')
        self.brand = kwargs.get('brand')


class Gx(feapder.Spider):

    __custom_setting__ = {
        "SPIDER_SLEEP_TIME": [1, 5]
    }

    def get_http_proxy(self):
        return requests.get("http://127.0.0.1:5010/get/").json().get("proxy")

    def get_https_proxy(self):
        return requests.get("http://127.0.0.1:5010/get/", params={"type": "https"}).json().get("proxy")

    def proxies(self):
        proxies = {
            "http": "http://{}".format(self.get_http_proxy()),
            "https": "http://{}".format(self.get_https_proxy()),
        }
        return proxies

    def fake_header(self):
        headers = Headers(
            browser="chrome",  # Generate only Chrome UA
            os="win",  # Generate ony Windows platform
            headers=True  # generate misc headers
        ).generate()

        headers['referer'] = "https://servicewechat.com/wx60786665cba15416/705/page-frame.html"
        headers['token'] = "4341070815154176"
        headers['uuid'] = "4341070815154176"
        headers['xweb_xhr'] = "1"

        return headers

    def start_requests(self):
        url = "https://www.pdty123.com/qhserver/api/works"
        params = {
            "page": '1',
            "type": "1",
            "token": "4341070815154176",
            "uuid": "4341070815154176",
            "sign": enSign("1")
        }
        yield feapder.Request(url, params=params, method="GET")

    def download_midware(self, request):

        request.headers = self.fake_header()
        request.proxies = self.proxies()
        return request

    def parse(self, request, response):
        data = response.json

        if len(data) == 0:
            return

        for i in data:
            title = i.get("title", "")
            gx_id = i.get("id", "")
            photo_url = i.get("logoUrl", "")
            articleNum = i.get("articleNum", "")

            params = {
                "id": gx_id,
                "token": "4341070815154176",
                "uuid": "4341070815154176",
                "sign": enSigns_info(gx_id)
            }
            url = "https://www.pdty123.com/qhserver/api/work/v3"
            yield feapder.Request(url, params=params, method="GET", callback=self.parse_ch,
                                  meta={
                                      "title": title,
                                      "gx_id": gx_id,
                                      "photo_url": photo_url,
                                      "articleNum": articleNum
                                  })

        url = "https://www.pdty123.com/qhserver/api/works"
        params = {
            "page": str(int(request.params.get("page", "1")) + 1),
            "type": "1",
            "token": "4341070815154176",
            "uuid": "4341070815154176",
            "sign": enSign(str(int(request.params.get("page", "1")) + 1))
        }

        yield feapder.Request(url, params=params, method="GET")

    def parse_ch(self, request, response):
        data = response.json
        work_id = data.get("work").get("id", "")

        ch_seeks = json.dumps({item['size']: item['num']
                              for item in data.get("seeks")})

        params = {
            "id": work_id,
            "token": "4341070815154176",
            "uuid": "4341070815154176",
            "sign": enSigns_info(work_id)
        }
        url = "https://www.pdty123.com/qhserver/api/work/other"

        yield feapder.Request(url, params=params, method="GET", callback=self.parse_qh,
                              meta={
                                  "title": request.meta.get("title", ""),
                                  "gx_id": request.meta.get("gx_id", ""),
                                  "photo_url": request.meta.get("photo_url", ""),
                                  "articleNum": request.meta.get("articleNum", ""),
                                  "ch_seeks": ch_seeks
                              })

    def parse_qh(self, request, response):
        data = response.json

        if data.get('data') is None:
            qh_seeks = "{}"
        else:
            if data.get('msg') == '切换到求货':
                qh_seeks = json.dumps({item['size']: item['num']
                                       for item in data.get("data").get("seeks")})

        ch_seeks = json.loads(request.meta.get("ch_seeks", "{}"))
        qh_seeks = json.loads(qh_seeks)

        seeks = {}
        for key, value in ch_seeks.items():
            seeks[key] = f"{value}/{qh_seeks.get(key, 0)}"

        for key, value in qh_seeks.items():
            if key not in seeks:
                seeks[key] = f"0/{value}"

        # ## 从seeks里取出siez和num
        for key, value in seeks.items():
            item = GXItem()
            size = key
            sell = value.split("/")[0]
            acquisition = value.split("/")[1]

            item.title = request.meta.get("title", "")
            item.gx_id = request.meta.get("gx_id", "")
            item.photo_url = request.meta.get("photo_url", "")
            item.articleNum = request.meta.get("articleNum", "")
            item.size = size
            item.sell = sell
            item.acquisition = acquisition
            item.brand = match_brand(
                request.meta.get("title", ""), brand_list)
            yield item


if __name__ == "__main__":
    Gx(redis_key='gx:info').start()
